<product-info
  id="MainProduct-{{ section.id }}"
  class="product_detail_section"
  data-section="{{ section.id }}"
  data-product-id="{{ product.id }}"
  data-update-url="true"
  data-url="{{ product.url }}"
  {% if section.settings.image_zoom == 'hover' %}
    data-zoom-on-hover
  {% endif %}
>
  {% comment %} <link rel="stylesheet" href="{{ 'section-main-product.css' | asset_url }}"> {% endcomment %}
  {% comment %} <link rel="stylesheet" href="{{ 'component-accordion.css' | asset_url }}"> {% endcomment %}
  {% comment %} <link rel="stylesheet" href="{{ 'component-price.css' | asset_url }}"> {% endcomment %}
  {% comment %} <link rel="stylesheet" href="{{ 'component-slider.css' | asset_url }}"> {% endcomment %}
  {% comment %} <link rel="stylesheet" href="{{ 'component-rating.css' | asset_url }}"> {% endcomment %}
  {% comment %} <link rel="stylesheet" href="{{ 'component-deferred-media.css' | asset_url }}"> {% endcomment %}
  {% comment %} <link rel="stylesheet" href="{{ '3d_ar.css' | asset_url }}"> {% endcomment %}
  <link rel="stylesheet" href="{{ 'product-combined.css' | asset_url }}">

  <!-- Mobile-specific styles for image loading -->
  <style>
    /* Mobile image loading improvements */
    #main_spinner {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      z-index: 10;
      width: 40px;
      height: 40px;
      visibility: hidden;
    }

    @media (max-width: 768px) {
      #main_spinner {
        width: 30px;
        height: 30px;
      }
      
      /* Ensure image container has proper dimensions on mobile */
      #picture-container {
        min-height: 200px;
        position: relative;
        display: flex;
        align-items: center;
        justify-content: center;
      }
      
      #product-main-image {
        max-width: 100%;
        height: 100%;
        transition: opacity 0.3s ease;
      }
      
      /* Improve touch targets for mobile */
      .ar_filter_options .option {
        min-height: 44px;
        padding: 8px;
        margin: 4px;
        touch-action: manipulation;
      }
      
      /* Prevent zoom on double tap for configurator options */
      .ar_filter_options {
        touch-action: manipulation;
      }
    }

    /* Loading state styles */
    .image-loading {
      opacity: 0.5;
      transition: opacity 0.3s ease;
    }

    .spinner-visible {
      visibility: visible !important;
    }

    /* Loading spinner animation for add to cart button */
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
  </style>

  {% comment %} <script src="{{ 'product-info.js' | asset_url }}" defer="defer"></script>
  <script src="{{ 'product-form.js' | asset_url }}" defer="defer"></script> {% endcomment %}
  <script type="module" src="{{ '3d-configurator.js' | asset_url }}"></script>

  <div class="product_detail">
    <div
      class="product product--{{ section.settings.media_size }} product--{{ section.settings.media_position }} product--{{ section.settings.gallery_layout }} product--mobile-{{ section.settings.mobile_thumbnails }} grid grid--1-col {% if product.media.size > 0 %}grid--2-col-tablet{% else %}product--no-media{% endif %}"
    >
      <div class="ar_conf_container main_container m-auto">
        <div class="ar_model_viewer" id="ar_model_viewer">
          <div class="modes_container">
            <div class="picture_viewer__container canvas-2d-container">
              <div class="picture_viewer">
                <div id="picture-container" data-media-gallery>
                  <img
                    src=""
                    id="product-main-image"
                    onclick="openModal()"
                    style="cursor: zoom-in;"
                    width="100%"
                    height="100%"
                    loading="lazy"
                    decoding="async"
                  >
                  <div id="main_spinner"></div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <div class="summary entry-summary">
          <div class="ar_filter" id="ar_filter">
            <div id="ar_filter_toggle" class="ar_filter_toggle"></div>

            <div id="product_title" class="ar_filter_title">{{ product.title | escape }}</div>
            <div id="product_rating" class="ar_filter_rating"></div>
            <div id="product_price" class="ar_filter_price">
              {%- render 'price',
                product: product,
                use_variant: true,
                show_badges: true,
                price_class: 'price--large'
              -%}
            </div>

            <!-- Dimensions -->
            <div id="group-0" class="ar_filter_group ar_filter_group_4">
              <div class="ar_filter_header">
                <div class="ar_filter_number">01</div>
                <div class="ar_filter_caption">Dimensions</div>
                <div class="ar_filter_options_result_item_in_header">
                  <span class="ar_filter_options_result_name_in_header"></span>
                  <span class="ar_filter_options_result_price_in_header"></span>
                </div>
                <div class="ar_filter_group_toggle"></div>
              </div>

              <div class="ar_filter_options type_select_no_photo grid_1"></div>
            </div>

            <!-- Border -->
            <div id="group-1" class="ar_filter_group ar_filter_group_1">
              <div class="ar_filter_header">
                <div class="ar_filter_number">02</div>
                <div class="ar_filter_caption">Border</div>
                <div class="ar_filter_options_result_item_in_header">
                  <span class="ar_filter_options_result_name_in_header"></span>
                  <span class="ar_filter_options_result_price_in_header"></span>
                </div>
                <div class="ar_filter_group_toggle"></div>
              </div>

              <div class="ar_filter_options type_select_no_photo flex filtering_border">
                <div class="option option_1-0 active" data-value="0">
                  <div class="component_title">No Border</div>
                </div>
                <div class="option option_1-1 " data-value="1">
                  <div class="component_title">Border</div>
                </div>
                {% comment %}
                  <div class="option option_1-2 " data-value="2">
                    <div class="component_title">2″</div>
                  </div>
                  <div class="option option_1-3 " data-value="3">
                    <div class="component_title">3″</div>
                  </div>
                  <div class="option option_1-4 " data-value="4">
                    <div class="component_title">4″</div>
                  </div>
                {% endcomment %}
              </div>
            </div>

            <!-- Frames -->
            <div id="group-2" class="ar_filter_group ar_filter_group_2">
              <div class="ar_filter_header">
                <div class="ar_filter_number">03</div>
                <div class="ar_filter_caption">Frames</div>
                <div class="ar_filter_options_result_item_in_header">
                  <span class="ar_filter_options_result_name_in_header"></span>
                  <span class="ar_filter_options_result_price_in_header"></span>
                </div>
                <div class="ar_filter_group_toggle"></div>
              </div>

              <div class="ar_filter_options type_select_image grid_4">
                <div class="option option_2-0" data-value="0">
                  <div class="image bordered sign">
                    <svg xmlns="http://www.w3.org/2000/svg" width="41" height="40" viewBox="0 0 41 40" fill="none">
                      <rect x="1.33331" y="0.5" width="39" height="39" rx="19.5" stroke="white" />
                      <path
                        d="M20.8333 4C17.6688 4 14.5754 4.93838 11.9442 6.69649C9.31301 8.45459 7.26225 10.9534 6.05125 13.8771C4.84025 16.8007 4.52339 20.0177 5.14076 23.1214C5.75812 26.2251 7.28197 29.0761 9.51961 31.3137C11.7573 33.5513 14.6082 35.0752 17.7119 35.6926C20.8156 36.3099 24.0326 35.9931 26.9563 34.7821C29.8799 33.5711 32.3787 31.5203 34.1368 28.8891C35.8949 26.2579 36.8333 23.1645 36.8333 20C36.8287 15.758 35.1415 11.691 32.1419 8.69144C29.1423 5.69186 25.0753 4.00466 20.8333 4ZM35.5533 20C35.5558 23.6824 34.173 27.2309 31.6797 29.9408L10.8925 9.1536C12.9984 7.22529 15.6197 5.95109 18.437 5.48625C21.2542 5.02141 24.1459 5.38598 26.7596 6.53557C29.3734 7.68515 31.5963 9.5701 33.1577 11.9608C34.7191 14.3514 35.5514 17.1446 35.5533 20ZM6.11332 20C6.11086 16.3176 7.49362 12.7691 9.98692 10.0592L30.7741 30.8464C28.6682 32.7747 26.047 34.0489 23.2297 34.5137C20.4124 34.9786 17.5207 34.614 14.907 33.4644C12.2933 32.3148 10.0703 30.4299 8.50894 28.0392C6.94758 25.6485 6.11524 22.8554 6.11332 20Z"
                        fill="#D9D9D9" />
                    </svg>
                  </div>
                  <div class="component_title">No Frame</div>
                </div>

                <div class="option option_2-1 " data-value="1">
                  <div class="image">
                    <img
                      src="{{ 'frame_black_mat.png' | asset_url }}"
                      style="object-fit:cover"
                      width="40"
                      height="40"
                      decoding="async"
                      loading="eager"
                      fetchpriority="high"
                    >
                  </div>
                  <div class="component_title">Black Mat</div>
                </div>

                <div class="option option_2-2 " data-value="2">
                  <div class="image">
                    <img
                      src="{{ 'frame_maple_natural.png' | asset_url }}"
                      style="object-fit:cover"
                      width="40"
                      height="40"
                      decoding="async"
                      loading="eager"
                      fetchpriority="high"
                    >
                  </div>
                  <div class="component_title">Maple Natural</div>
                </div>

                <div class="option option_2-3 " data-value="3">
                  <div class="image bordered">
                    <img
                      src="{{ 'frame_white.png' | asset_url }}"
                      style="object-fit:cover"
                      width="40"
                      height="40"
                      decoding="async"
                      loading="eager"
                      fetchpriority="high"
                    >
                  </div>
                  <div class="component_title">White</div>
                </div>

                {% comment %}
                  <div class="option option_2-4 " data-value="4">
                    <div class="image">
                      <img src="{{ 'frame_natural_oak.png' | asset_url }}" style="object-fit:cover" width="40" height="40"
                        decoding="async" loading="eager" fetchpriority="high">
                    </div>
                    <div class="component_title">Natural Oak</div>
                  </div>

                  <div class="option option_2-5 " data-value="5">
                    <div class="image">
                      <img src="{{ 'frame_wallnut.png' | asset_url }}" style="object-fit:cover" width="40" height="40"
                        decoding="async" loading="eager" fetchpriority="high">
                    </div>
                    <div class="component_title">Wallnut</div>
                  </div>
                {% endcomment %}
              </div>
            </div>

            <form method="post" action="/cart/add" id="product-form">
              <input
                type="hidden"
                name="id"
                value="{{ product.selected_or_first_available_variant.id }}"
                id="variant-id"
              >

              <!-- Add a visible but styled display-none variant selector to work with Shopify's standards -->
              <select id="product-select" style="display: none;">
                {% for variant in product.variants %}
                  <option
                    value="{{ variant.id }}"
                    data-variant-name="{{ variant.title }}"
                    data-price="{{ variant.price }}"
                    {% if variant.available == false %}
                      disabled
                    {% endif %}
                  >
                    {{ variant.title }} - {{ variant.price | money }}
                  </option>
                {% endfor %}
              </select>

              <button
                type="submit"
                name="add"
                id="add_to_cart"
                class="product-form__submit button button--full-width ar_result_button{% if show_dynamic_checkout %} button--secondary{% endif %}{% if block.settings.show_dynamic_checkout %} button--secondary{% endif %}"
                {% if product.selected_or_first_available_variant.available == false %}
                  disabled
                {% endif %}
              >
                <span>
                  {%- if product.selected_or_first_available_variant.available -%}
                    {{ 'products.product.add_to_cart' | t }}
                  {%- else -%}
                    {{ 'products.product.sold_out' | t }}
                  {%- endif -%}
                </span>
              </button>
            </form>
          </div>
        </div>
      </div>
    </div>

    <script>
       (function () {
          const productTitle = {{ product.title | json }};

          // fetch('http://localhost:5000/api/shopify/ai_collections', {
          fetch('https://picturefindr.com/api/shopify/ai_collections', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Accept': 'application/json'
            },
            body: JSON.stringify({ query: productTitle }),
          })
            .then(response => response.json())
            .then(data => {
              if (data.success && data.collections) {
                aiCategories.renderCategories(data.collections);
              } else {
                throw new Error('Invalid response format');
              }
            })
            .catch(error => {
              console.error('Error with AI categories:', error);
              document.getElementById('aiCategories').innerHTML = '<div class="error-message">Failed to load categories</div>';
            });
          }) ();
    </script>

    <script type="application/ld+json">
      {{ product | structured_data }}
    </script>

    {%- if product.featured_image -%}
      <script>
        window.productImages = {{ product.images | json }};
      </script>
    {%- endif -%}

    <!-- DEBUG: Product Variants Information -->
    <script>
      window.debugProductVariants = {{ product.variants | json }};
      console.log('=== PRODUCT VARIANTS DEBUG ===');
      console.log('Total variants:', {{ product.variants.size }});
      {% for variant in product.variants %}
      console.log('Variant {{ forloop.index }}:', {
        id: {{ variant.id }},
        title: {{ variant.title | json }},
        option1: {{ variant.option1 | json }},
        price: {{ variant.price }},
        available: {{ variant.available }},
        featured_image: {{ variant.featured_image | json }}
      });
      {% endfor %}
      console.log('=== END VARIANTS DEBUG ===');
      
      // Enhanced debug: Check variant-image mapping
      console.log('=== VARIANT-IMAGE MAPPING DEBUG ===');
      {% for variant in product.variants %}
      console.log('Variant "{{ variant.title }}":', {
        id: {{ variant.id }},
        featured_image_url: {% if variant.featured_image %}'{{ variant.featured_image | image_url }}'{% else %}null{% endif %}
      });
      {% endfor %}
      console.log('=== END VARIANT-IMAGE MAPPING DEBUG ===');
    </script>

    <script>
      // Create a global object to store frame configuration
      window.frameConfig = {
        frameType: 1,
        dimensions: 2,
        borderType: 3,
        width: 0,
        height: 0,
      };

      // Preload all frame images to eliminate delay
      window.preloadedImages = {};
      preloadFrameImages();

      // Function to update the frame configuration
      function updateFrameConfig() {
        if (window.pictureSettings) {
          window.frameConfig.frameType = window.pictureSettings.frameType || 0;
          window.frameConfig.width = window.pictureSettings.width || 0;
          window.frameConfig.height = window.pictureSettings.height || 0;
          window.frameConfig.dimensions = `${window.frameConfig.width}" x ${window.frameConfig.height}"`;
        }
      }

      function changeFrameImageConfig(imageScale, imageWidth, imageHeight, imageBorderWidth, frameType) {
        let imageType = 'landscape';
        const activeOption = document.querySelector('#group-0 .option.active');
        if (!activeOption) {
          console.error('No active dimension option found');
          return;
        }

        const priceElement = activeOption.querySelector('.component_price');
        if (priceElement) {
          const imageFramePrice = priceElement.textContent;
          const priceDisplay = document.querySelector('.price__regular .product_sub_title');
          if (priceDisplay) {
            priceDisplay.textContent = imageFramePrice.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
          }
        }

        const productImage = document.getElementById('product-main-image');
        if (!productImage) {
          console.error('Product image element not found');
          return;
        }

        // Determine image orientation
        if (window.productImages[0].includes("square")) {
          imageType = "square";
        } else if (window.productImages[0].includes("landscape")) {
          imageType = "landscape";
        } else {
          imageType = "portrait";
        }
       
        const picture_container = document.getElementById("picture-container");
        console.log("imageType ============ ", imageType);
        picture_container.style.width = imageType == "landscape" ? `90%` : `60%`;
        picture_container.style.height = imageType == "landscape" ? `100%` : `100%`;

        const frameTypes = ['noframe', 'black', 'maple', 'white'];
        const newFrameType = frameTypes[frameType] || 'black';
        let imageNameSpace = `${imageScale}-${newFrameType}-${imageBorderWidth}`;
        
        // Validate productImages availability
        if (!window.productImages || !Array.isArray(window.productImages)) {
          console.error('productImages is not available or not an array');
          return;
        }

        // Show loading spinner
        const spinner = document.getElementById('main_spinner');
        if (spinner) {
          spinner.style.visibility = 'visible';
        }
        productImage.style.display = 'none';

        // Find matching image with improved logic
        let imageUrl = findMatchingImage(imageNameSpace, imageType, imageBorderWidth);
      
        console.log("imageUrl ============ ", imageUrl);
        productImage.src = imageUrl;
        window.productImageUrl = imageUrl;
        
        if (imageScale == "small") {
          productImage.style.width = "80%";
          productImage.style.height = "80%";
        } else if (imageScale == "medium") {
          productImage.style.width = "90%";
          productImage.style.height = "90%";
        } else {
          productImage.style.width = "100%";
          productImage.style.height = "100%";
        }

        // Hide spinner and show image
        hideSpinner(spinner, productImage)
        // if (imageUrl) {
        //   // Preload image with proper error handling and mobile optimization
        //   loadImageWithFallback(imageUrl, productImage, spinner);
        // } else {
        //   console.error('No matching image found for pattern:', imageNameSpace);
        //   hideSpinner(spinner, productImage);
        // }
      }

      // Enhanced image finding function
      function findMatchingImage(imageNameSpace, imageType, imageBorderWidth) {
        let imageUrl = null;

        // First try exact pattern match
        imageUrl = window.productImages.find((img) => {
          const imgStr = typeof img === 'string' ? img : (img && img.src ? img.src : '');
          return imgStr.includes(imageNameSpace);
        });

        // If not found, try pattern without border
        if (!imageUrl) {
          const patternWithoutBorder = imageNameSpace.replace(`-${imageBorderWidth}`, '');
          imageUrl = window.productImages.find((img) => {
            const imgStr = typeof img === 'string' ? img : (img && img.src ? img.src : '');
            return imgStr.includes(patternWithoutBorder);
          });
        }

        // If still not found, try flexible matching by image type
        if (!imageUrl) {
          imageUrl = window.productImages.find((img) => {
            const imgStr = typeof img === 'string' ? img : (img && img.src ? img.src : '');
            return imgStr.includes(imageType) && imgStr.includes('black');
          });
        }

        // Handle object format
        if (imageUrl && typeof imageUrl === 'object' && imageUrl.src) {
          imageUrl = imageUrl.src;
        }

        return imageUrl;
      }

      function preloadFrameImages() {
        if (!window.productImages || !Array.isArray(window.productImages)) {
          console.warn('Product images not available for preloading');
          return;
        }
        
        // Limit preloading on mobile to save memory and bandwidth
        const isMobile = window.innerWidth <= 768 || /Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
        const maxPreloadImages = isMobile ? 5 : window.productImages.length;
        window.productImages.slice(0, maxPreloadImages).forEach((imageUrl, index) => {
          // Stagger preloading to avoid overwhelming mobile networks
          const imgStr = typeof imageUrl === 'string' ? imageUrl : (imageUrl && imageUrl.src ? imageUrl.src : '');
          if (imgStr) {
            const img = new Image();
            img.onload = function() {
              window.preloadedImages[imgStr] = true;
            };
            img.onerror = function() {
              console.warn('Failed to preload image:', imgStr);
            };
            img.src = imgStr;
          }
        });
      }

      // Helper function to hide spinner and show image
      function hideSpinner(spinner, productImage) {
        if (spinner) {
          spinner.style.visibility = 'hidden';
        }
        productImage.style.display = 'block';
      }

      // Enhanced event handlers with touch support
      function setupEventHandlers() {
        // Support both click and touch events
        const eventTypes = ['click', 'touchend'];
        
        eventTypes.forEach(eventType => {
          $(document).on(eventType, `#group-0 .option`, function (e) {
            if (eventType === 'touchend') {
              e.preventDefault(); // Prevent double firing on mobile
            }
            
            $(this).addClass('active');
            $(this).siblings().removeClass('active');
            const selectedElement = $(this).closest('.ar_filter_group');
            const titleBorder = $(this).find('.component_title').text();
            selectedElement.find('.ar_filter_options_result_name_in_header').text(`${titleBorder}`);
            let imageScale = $(this).attr('data-scale');
            let imageWidth = $(this).attr('data-width');
            let imageHeight = $(this).attr('data-height');

            const imageBorderElement = document.querySelector('#group-1 .option.active');
            const imageBorderWidth = imageBorderElement ? imageBorderElement.getAttribute('data-value') : '0';
            
            let imageFrameType = 1;
            const imageFrameElement = document.querySelector('#group-2 .option.active');
            if(imageFrameElement) {
              imageFrameType = imageFrameElement.getAttribute('data-value');
            } else {
              const frameOption = $('#group-2 .option_2-1');
              frameOption.addClass('active');
              frameOption.siblings().removeClass('active');
              imageFrameType = frameOption.attr('data-value');
            }

            changeFrameImageConfig(imageScale, imageWidth, imageHeight, imageBorderWidth, imageFrameType);
          });

          $(document).on(eventType, `#group-2 .option`, function (e) {
            if (eventType === 'touchend') {
              e.preventDefault();
            }
            
            $(this).addClass('active');
            $(this).siblings().removeClass('active');
            const frameType = $(this).attr('data-value');

            // Get frame name for variant selection
            const frameName = $(this).find('.component_title').text().trim();
            
            const imageBorderElement = document.querySelector('#group-1 .option.active');
            const imageBorderWidth = imageBorderElement ? imageBorderElement.getAttribute('data-value') : '0';

            let imageScale = ""
            const activeElements = document.querySelector('#group-0 .option.active');
            if (activeElements) {
              imageScale = activeElements.getAttribute('data-scale');
              const imageWidth = activeElements.getAttribute('data-width');
              const imageHeight = activeElements.getAttribute('data-height');
              
              changeFrameImageConfig(imageScale, imageWidth, imageHeight, imageBorderWidth, frameType);
            }

            // Update variant selection based on frame choice FIRST
            if (typeof updateVariantSelection === 'function') {
              if (!imageScale) {
                imageScale = "medium";
              }
              const frameTypes = ['noframe', 'black', 'maple', 'white'];
              const newFrameType = frameTypes[frameType] || 'black';
              let variantName = imageScale + "-" + newFrameType + "-" + imageBorderWidth;

              console.log("variantName ============ ", variantName);
              updateVariantSelection(variantName);
            }
          });

          $(document).on(eventType, `#group-1 .option`, function (e) {
            if (eventType === 'touchend') {
              e.preventDefault();
            }
            
            $(this).addClass('active');
            $(this).siblings().removeClass('active');

            const imageBorderWidth = $(this).attr('data-value');
            
            const activeElements = document.querySelector('#group-0 .option.active');
            const imageFrameElement = document.querySelector('#group-2 .option.active');
            
            if (activeElements && imageFrameElement) {
              const imageScale = activeElements.getAttribute('data-scale');
              const imageWidth = activeElements.getAttribute('data-width');
              const imageHeight = activeElements.getAttribute('data-height');
              const frameType = imageFrameElement.getAttribute('data-value');
              
              changeFrameImageConfig(imageScale, imageWidth, imageHeight, imageBorderWidth, frameType);
            }
          });
        });
      }

      const originalCheckChanges = window.checkChanges;
      window.checkChanges = function () {
        console.log("window.checkChanges");
        if (originalCheckChanges) {
          originalCheckChanges.apply(this, arguments);
        }
        updateFrameConfig();
      };

      document.addEventListener('DOMContentLoaded', function () {
        setupEventHandlers();
        
        // Debug function for mobile troubleshooting
        window.debugImageLoading = function() {
          const productImage = document.getElementById('product-main-image');
          const spinner = document.getElementById('main_spinner');
        };

        // Auto-debug on mobile devices
        const isMobile = /Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
        if (isMobile) {
          setTimeout(() => {
            window.debugImageLoading();
          }, 100);
        }

        // Set up error monitoring for mobile
        window.addEventListener('error', function(e) {
          if (e.filename && e.filename.includes('image') || e.message.includes('img')) {
            console.error('Image loading error detected:', e.message);
            console.error('Error details:', e);
          }
        });

        // Monitor network connectivity on mobile
        if ('navigator' in window && 'connection' in navigator) {
          const connection = navigator.connection;
          // Adjust image loading strategy based on connection
          if (connection.effectiveType === 'slow-2g' || connection.effectiveType === '2g') {
            window.maxPreloadImages = 2;
          }
        }
      });
    </script>

    <div
      class="
        main_container multi_tap_product_info grid__item{% if settings.page_width > 1400 and section.settings.media_size == "
        small" %} product__info-wrapper--extra-padding{% endif %}{% if settings.animations_reveal_on_scroll %}
        scroll-trigger animate--slide-in{% endif %}
      "
    >
      <section
        id="ProductInfo-{{ section.id }}"
        class="{% if section.settings.enable_sticky_info %} product__column-sticky{% endif %}"
      >
        {%- assign product_form_id = 'product-form-' | append: section.id -%}

        {%- for block in section.blocks -%}
          {%- case block.type -%}
            {%- when 'description' -%}
              {%- if product.description != blank -%}
                <div class="product__description rte quick-add-hidden" {{ block.shopify_attributes }}>
                  <div class="tab main_container m-auto">
                    <button class="tablinks active" onclick="openCity(event, 'Description')">Description</button>
                    <button class="tablinks" onclick="openCity(event, 'Specifications')">Specifications</button>
                    <button class="tablinks" onclick="openCity(event, 'Reviews')">Reviews</button>
                    <button class="tablinks" onclick="openCity(event, 'FAQ')">FAQ</button>
                  </div>
                  <div id="Description" class="tabcontent active">
                    <p>{{ product.description }}</p>
                  </div>
                  <div id="Specifications" class="tabcontent">
                    <h3>Specifications</h3>
                  </div>
                  <div id="Reviews" class="tabcontent">
                    <h3>Reviews</h3>
                  </div>
                  <div id="FAQ" class="tabcontent">
                    <div class="faq-container">
                      <div class="faq-item">
                        <button class="faq-question">
                          What makes Hermosa's wall art special?
                          <span class="faq-icon">
                            <svg
                              width="24"
                              height="24"
                              viewBox="0 0 24 24"
                              fill="none"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <path d="M6 9L12 15L18 9" stroke="currentColor" stroke-width="2" stroke-linecap="round"
                                stroke-linejoin="round" />
                            </svg>
                          </span>
                        </button>
                        <div class="faq-answer">
                          At Hermosa, we combine high-quality materials, timeless designs, and expert craftsmanship to
                          create wall art that enhances any space.
                        </div>
                      </div>

                      <div class="faq-item">
                        <button class="faq-question">
                          Can I see how the artwork looks in my space before buying?
                          <span class="faq-icon">
                            <svg
                              width="24"
                              height="24"
                              viewBox="0 0 24 24"
                              fill="none"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <path d="M6 9L12 15L18 9" stroke="currentColor" stroke-width="2" stroke-linecap="round"
                                stroke-linejoin="round" />
                            </svg>
                          </span>
                        </button>
                        <div class="faq-answer">
                          We offer a virtual "View in Your Space" feature where you can see how the artwork will look in
                          your space before making a purchase. Simply use our augmented reality tool on your mobile
                          device to visualize the artwork in your own environment.
                        </div>
                      </div>

                      <div class="faq-item">
                        <button class="faq-question">
                          Do you provide framing options?
                          <span class="faq-icon">
                            <svg
                              width="24"
                              height="24"
                              viewBox="0 0 24 24"
                              fill="none"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <path d="M6 9L12 15L18 9" stroke="currentColor" stroke-width="2" stroke-linecap="round"
                                stroke-linejoin="round" />
                            </svg>
                          </span>
                        </button>
                        <div class="faq-answer">
                          We offer a selection of high-quality framing options for your convenience. You can choose from
                          various frame styles and materials to complement your artwork and suit your personal taste.
                        </div>
                      </div>

                      <div class="faq-item">
                        <button class="faq-question">
                          How long does shipping take?
                          <span class="faq-icon">
                            <svg
                              width="24"
                              height="24"
                              viewBox="0 0 24 24"
                              fill="none"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <path d="M6 9L12 15L18 9" stroke="currentColor" stroke-width="2" stroke-linecap="round"
                                stroke-linejoin="round" />
                            </svg>
                          </span>
                        </button>
                        <div class="faq-answer">
                          Shipping times vary depending on your location and the product purchased. Typically, orders
                          are processed within 1-3 business days, and domestic shipping usually takes 3-7 business days.
                          International shipping times may vary. You will receive a tracking number once your order has
                          been shipped.
                        </div>
                      </div>

                      <div class="faq-item">
                        <button class="faq-question">
                          What if my artwork arrives damaged?
                          <span class="faq-icon">
                            <svg
                              width="24"
                              height="24"
                              viewBox="0 0 24 24"
                              fill="none"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <path d="M6 9L12 15L18 9" stroke="currentColor" stroke-width="2" stroke-linecap="round"
                                stroke-linejoin="round" />
                            </svg>
                          </span>
                        </button>
                        <div class="faq-answer">
                          In the rare event that your artwork arrives damaged, please contact us immediately with photos
                          of the damaged item and packaging. We will work with you to resolve the issue promptly by
                          offering a replacement or a refund.
                        </div>
                      </div>

                      <div class="faq-item">
                        <button class="faq-question">
                          Can I return or exchange an item?
                          <span class="faq-icon">
                            <svg
                              width="24"
                              height="24"
                              viewBox="0 0 24 24"
                              fill="none"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <path d="M6 9L12 15L18 9" stroke="currentColor" stroke-width="2" stroke-linecap="round"
                                stroke-linejoin="round" />
                            </svg>
                          </span>
                        </button>
                        <div class="faq-answer">
                          We want you to be satisfied with your purchase. If for any reason you are unhappy with your
                          artwork, you may return it within 30 days of receiving the item for a refund or exchange.
                          Please ensure the artwork is in its original condition and packaging for a smooth return
                          process. Contact our customer support team to initiate the return or exchange process.
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              {%- endif -%}

            {%- when 'collapsible_tab' -%}
              <div class="product__accordion accordion quick-add-hidden" {{ block.shopify_attributes }}>
                <details id="Details-{{ block.id }}-{{ section.id }}">
                  <summary>
                    <div class="summary__title">
                      {% render 'icon-accordion', icon: block.settings.icon %}
                      <h2 class="h4 accordion__title inline-richtext">
                        {{ block.settings.heading | default: block.settings.page.title | escape }}
                      </h2>
                    </div>
                    {{- 'icon-caret.svg' | inline_asset_content -}}
                  </summary>
                  <div class="accordion__content rte" id="ProductAccordion-{{ block.id }}-{{ section.id }}">
                    {{ block.settings.content }}
                    {{ block.settings.page.content }}
                  </div>
                </details>
              </div>
            {%- when 'popup' -%}
              <modal-opener
                class="product-popup-modal__opener quick-add-hidden"
                data-modal="#PopupModal-{{ block.id }}"
                {{ block.shopify_attributes }}
              >
                <button
                  id="ProductPopup-{{ block.id }}"
                  class="product-popup-modal__button link"
                  type="button"
                  aria-haspopup="dialog"
                >
                  {{ block.settings.text | default: block.settings.page.title | escape }}
                </button>
              </modal-opener>
            {%- when 'variant_picker' -%}
              <div class="product-variant-picker-wrapper">
                {% render 'product-variant-picker', product: product, block: block, product_form_id: product_form_id %}
              </div>
          {%- endcase -%}
        {%- endfor -%}
      </section>
    </div>

    {%- assign current_product = product -%}
    <div class="related_products_section">
      <div class="main_container m-auto justify-center related_product_title">
        <span class="">YOU MAY ALSO LIKE</span>
      </div>
      <div class="main_container m-auto related-products-part">
        <div class="ai-categories-section">
          <div id="aiCategories" class="ai-categories-container">
            <div class="debug-message">Loading categories...</div>
          </div>
        </div>

        <script>
          class AICategories {
            constructor() {
              this.container = document.getElementById('aiCategories');
              this.currentPosition = 0;
              this.sliding = false;
              this.touchStartX = 0;
              this.touchEndX = 0;

              // Initialize touch events
              this.initializeTouchEvents();
            }

            initializeTouchEvents() {
              this.container.addEventListener('touchstart', (e) => {
                this.touchStartX = e.touches[0].clientX;
              }, { passive: true });

              this.container.addEventListener('touchmove', (e) => {
                this.touchEndX = e.touches[0].clientX;
              }, { passive: true });

              this.container.addEventListener('touchend', () => {
                const swipeDistance = this.touchStartX - this.touchEndX;
                if (Math.abs(swipeDistance) > 50) { // Minimum swipe distance
                  if (swipeDistance > 0) {
                    this.slide('next');
                  } else {
                    this.slide('prev');
                  }
                }
              });
            }

            renderCategories(categories) {
              if (!Array.isArray(categories) || categories.length === 0) {
                this.container.innerHTML = '<div class="no-results">No categories found</div>';
                return;
              }

              this.container.innerHTML = `
                <button id="prevButton" class="nav-button prev-button" aria-label="Previous categories">
                  <svg viewBox="0 0 24 24"><path d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"/></svg>
                </button>
                <div class="categories-slider">
                  ${categories.map(category => `
                    <div class="category-card" onclick="window.location.href='/search?q=${encodeURIComponent(category)}'">
                      <div class="category-title">${category}</div>
                    </div>
                  `).join('')}
                </div>
                <button id="nextButton" class="nav-button next-button" aria-label="Next categories">
                  <svg viewBox="0 0 24 24"><path d="M8.59 16.59L10 18l6-6-6-6-1.41 1.41L13.17 12z"/></svg>
                </button>
              `;

              // Reset position
              this.currentPosition = 0;

              // Add event listeners
              document.getElementById('prevButton')?.addEventListener('click', () => this.slide('prev'));
              document.getElementById('nextButton')?.addEventListener('click', () => this.slide('next'));

              // Initial update of navigation buttons
              this.updateNavigationButtons();

              // Add resize observer
              this.observeResize();
            }

            observeResize() {
              const resizeObserver = new ResizeObserver(() => {
                this.updateNavigationButtons();
              });
              resizeObserver.observe(this.container);
            }

            slide(direction) {
              if (this.sliding) return;

              const slider = document.querySelector('.categories-slider');
              if (!slider) return;

              this.sliding = true;
              const cardWidth = document.querySelector('.category-card')?.offsetWidth + 10; // Include gap
              const containerWidth = this.container.offsetWidth;
              const sliderWidth = slider.scrollWidth;
              const maxPosition = Math.max(0, Math.ceil((sliderWidth - containerWidth) / cardWidth));

              if (direction === 'prev' && this.currentPosition > 0) {
                this.currentPosition--;
              } else if (direction === 'next' && this.currentPosition < maxPosition) {
                this.currentPosition++;
              }

              const offset = -this.currentPosition * cardWidth;
              slider.style.transform = `translateX(${offset}px)`;

              this.updateNavigationButtons();

              // Reset sliding flag after animation
              setTimeout(() => {
                this.sliding = false;
              }, 100);
            }

            updateNavigationButtons() {
              const prevButton = document.getElementById('prevButton');
              const nextButton = document.getElementById('nextButton');
              const slider = document.querySelector('.categories-slider');

              if (!slider || !prevButton || !nextButton) return;

              const containerWidth = this.container.offsetWidth;
              const sliderWidth = slider.scrollWidth;
              const cardWidth = document.querySelector('.category-card')?.offsetWidth + 10;
              const maxPosition = Math.max(0, Math.ceil((sliderWidth - containerWidth) / cardWidth));

              prevButton.disabled = this.currentPosition <= 0;
              nextButton.disabled = this.currentPosition >= maxPosition;

              // Hide navigation buttons if all content fits
              const showNavigation = sliderWidth > containerWidth;
              prevButton.style.display = showNavigation ? 'flex' : 'none';
              nextButton.style.display = showNavigation ? 'flex' : 'none';
            }
          }

          // Create instance and initialize
          const aiCategories = new AICategories();

          // Execute API call
        </script>

        <!-- Then your related products section -->
        <div class="related-products-section main_container">
          <div class="template-search__results collection">
            <ul class="grid product-grid grid--1-col-tablet-down grid--4-col-desktop">
                             {%- assign related_count = 0 -%}
               {%- assign max_related = 12 -%}
               {%- assign shown_product_ids = '' -%}
               
               {%- comment -%} 
                 Enhanced Related Products Algorithm:
                 1. Search-based matching (if title contains searchable terms)
                 2. High shared tags (6+ tags in common)
                 3. Medium shared tags (3-5 tags in common)
                 4. Low shared tags (1-2 tags in common)
               {%- endcomment -%}
               
               {%- comment -%} PASS 1: Search-based matching for titles like "Old City" {%- endcomment -%}
               {%- assign current_title_lower = current_product.title | downcase -%}
               {%- assign title_words = current_title_lower | split: ' ' -%}
               
               {%- for product in collections.all.products limit: 100 -%}
                 {%- if product.id != current_product.id and related_count < max_related -%}
                   {%- assign product_title_lower = product.title | downcase -%}
                   {%- assign product_description_lower = product.description | downcase -%}
                   {%- assign search_match_score = 0 -%}
                   
                   {%- comment -%} Check if product title/description contains words from current title {%- endcomment -%}
                   {%- for title_word in title_words -%}
                     {%- if title_word.size >= 3 -%} {%- comment -%} Only consider words 3+ characters {%- endcomment -%}
                       {%- if product_title_lower contains title_word -%}
                         {%- assign search_match_score = search_match_score | plus: 3 -%} {%- comment -%} Title match is worth 3 points {%- endcomment -%}
                       {%- endif -%}
                       {%- if product_description_lower contains title_word -%}
                         {%- assign search_match_score = search_match_score | plus: 1 -%} {%- comment -%} Description match is worth 1 point {%- endcomment -%}
                       {%- endif -%}
                       
                       {%- comment -%} Also check tags for the search terms {%- endcomment -%}
                       {%- for product_tag in product.tags -%}
                         {%- assign tag_lower = product_tag | downcase -%}
                         {%- if tag_lower contains title_word -%}
                           {%- assign search_match_score = search_match_score | plus: 2 -%} {%- comment -%} Tag match is worth 2 points {%- endcomment -%}
                         {%- endif -%}
                       {%- endfor -%}
                     {%- endif -%}
                   {%- endfor -%}
                   
                   {%- comment -%} Show products with high search relevance (like search results) {%- endcomment -%}
                   {%- if search_match_score >= 3 -%}
                     {%- assign shown_product_ids = shown_product_ids | append: ',' | append: product.id -%}
                     <li class="grid__item" data-match-type="search" data-search-score="{{ search_match_score }}">
                       {%- render 'card-product',
                         card_product: product,
                         media_aspect_ratio: section.settings.image_ratio,
                         image_shape: section.settings.image_shape,
                         show_secondary_image: section.settings.show_secondary_image,
                         show_vendor: section.settings.show_vendor,
                         show_rating: section.settings.show_rating,
                         lazy_load: true
                       -%}
                     </li>
                     {%- assign related_count = related_count | plus: 1 -%}
                   {%- endif -%}
                   
                 {%- endif -%}
               {%- endfor -%}
               
               {%- comment -%} PASS 2: High shared tags (6+ tags) {%- endcomment -%}
               {%- for product in collections.all.products limit: 100 -%}
                 {%- if product.id != current_product.id and related_count < max_related -%}
                   {%- assign product_id_str = product.id | append: '' -%}
                   {%- unless shown_product_ids contains product_id_str -%}
                     
                     {%- assign shared_tags_count = 0 -%}
                     {%- for current_tag in current_product.tags -%}
                       {%- if product.tags contains current_tag -%}
                         {%- assign shared_tags_count = shared_tags_count | plus: 1 -%}
                       {%- endif -%}
                     {%- endfor -%}
                     
                     {%- if shared_tags_count >= 6 -%}
                       {%- assign shown_product_ids = shown_product_ids | append: ',' | append: product.id -%}
                       <li class="grid__item" data-match-type="high-tags" data-shared-tags="{{ shared_tags_count }}">
                         {%- render 'card-product',
                           card_product: product,
                           media_aspect_ratio: section.settings.image_ratio,
                           image_shape: section.settings.image_shape,
                           show_secondary_image: section.settings.show_secondary_image,
                           show_vendor: section.settings.show_vendor,
                           show_rating: section.settings.show_rating,
                           lazy_load: true
                         -%}
                       </li>
                       {%- assign related_count = related_count | plus: 1 -%}
                     {%- endif -%}
                     
                   {%- endunless -%}
                 {%- endif -%}
               {%- endfor -%}
            </ul>
          </div>
        </div>
      </div>
    </div>

    <script>
      // Enhanced debug function
      window.debugRelatedProducts = function() {
        const container = document.querySelector('.related-products-section');
        if (container) {
          container.classList.toggle('hide-related-debug');
        }
        
        console.log('=== ENHANCED RELATED PRODUCTS ANALYSIS ===');
        console.log('Current Product Title:', {{ current_product.title | json }});
        console.log('Current Product Tags:', {{ current_product.tags | json }});
        
        const matchTypes = {};
        const searchResults = document.querySelectorAll('[data-match-type="search"]');
        const highTagResults = document.querySelectorAll('[data-match-type="high-tags"]');
        const mediumTagResults = document.querySelectorAll('[data-match-type="medium-tags"]');
        const lowTagResults = document.querySelectorAll('[data-match-type="low-tags"]');
        
        console.log('\n🔍 SEARCH-BASED MATCHES:', searchResults.length);
        searchResults.forEach(item => {
          const score = item.getAttribute('data-search-score');
          console.log(`  - Score: ${score} (higher = better match)`);
        });
        
        console.log('\n✅ HIGH TAG MATCHES (6+ tags):', highTagResults.length);
        console.log('📊 MEDIUM TAG MATCHES (3-5 tags):', mediumTagResults.length);
        console.log('⚡ LOW TAG MATCHES (1-2 tags):', lowTagResults.length);
        
        console.log('\n=== FOR "OLD CITY" EXAMPLE ===');
        console.log('Search matches will find products with:');
        console.log('- "old" or "city" in title (3 points each)');
        console.log('- "old city" in tags (2 points each)');
        console.log('- "old" or "city" in description (1 point each)');
        console.log('Products with 3+ points will appear first (like search results)');
        console.log('=== END ANALYSIS ===');
        
        return {
          search: searchResults.length,
          highTags: highTagResults.length,
          mediumTags: mediumTagResults.length,
          lowTags: lowTagResults.length,
          total: searchResults.length + highTagResults.length + mediumTagResults.length + lowTagResults.length
        };
      };
      
      // Auto-show debug for 10 seconds
      document.addEventListener('DOMContentLoaded', function() {
        const container = document.querySelector('.related-products-section');
        
        setTimeout(() => {
          if (container && window.location.hostname !== 'localhost') {
            container.classList.add('hide-related-debug');
          }
        }, 10000);
        
        setTimeout(() => {
          window.debugRelatedProducts();
        }, 1000);
      });
      
      // Keyboard shortcut: Ctrl+Shift+S for Search debug
      document.addEventListener('keydown', function(e) {
        if (e.ctrlKey && e.shiftKey && e.key === 'S') {
          window.debugRelatedProducts();
        }
      });
    </script>

    <!-- Image Preview Modal -->
    <div id="imagePreviewModal" class="image-preview-modal">
      <div class="modal-content">
        <span class="close-modal" onclick="closeModal()">&times;</span>
        <!-- Sirv container will be dynamically inserted here -->
      </div>
    </div>
  </div>
</product-info>
{% schema %}
{
  "name": "t:sections.main-product.name",
  "tag": "section",
  "class": "section",
  "settings": [
    {
      "type": "select",
      "id": "media_size",
      "options": [
        {
          "value": "small",
          "label": "t:sections.main-product.settings.media_size.options__1.label"
        },
        {
          "value": "medium",
          "label": "t:sections.main-product.settings.media_size.options__2.label"
        },
        {
          "value": "large",
          "label": "t:sections.main-product.settings.media_size.options__3.label"
        }
      ],
      "default": "large",
      "label": "t:sections.main-product.settings.media_size.label"
    },
    {
      "type": "select",
      "id": "media_position",
      "options": [
        {
          "value": "left",
          "label": "t:sections.main-product.settings.media_position.options__1.label"
        },
        {
          "value": "right",
          "label": "t:sections.main-product.settings.media_position.options__2.label"
        }
      ],
      "default": "left",
      "label": "t:sections.main-product.settings.media_position.label"
    },
    {
      "type": "select",
      "id": "image_ratio",
      "options": [
        {
          "value": "adapt",
          "label": "t:sections.main-product.settings.image_ratio.options__1.label"
        },
        {
          "value": "square",
          "label": "t:sections.main-product.settings.image_ratio.options__2.label"
        }
      ],
      "default": "adapt",
      "label": "t:sections.main-product.settings.image_ratio.label"
    }
  ],
  "blocks": [
    {
      "type": "@app"
    },
    {
      "type": "text",
      "name": "Text",
      "settings": [
        {
          "type": "inline_richtext",
          "id": "text",
          "label": "Text"
        },
        {
          "type": "select",
          "id": "text_style",
          "options": [
            {
              "value": "body",
              "label": "Body"
            },
            {
              "value": "subtitle",
              "label": "Subtitle"
            },
            {
              "value": "uppercase",
              "label": "Uppercase"
            }
          ],
          "default": "body",
          "label": "Text style"
        }
      ]
    },
    {
      "type": "title",
      "name": "t:sections.main-product.blocks.title.name",
      "limit": 1
    },
    {
      "type": "price",
      "name": "t:sections.main-product.blocks.price.name",
      "limit": 1
    },
    {
      "type": "rating",
      "name": "Rating",
      "limit": 1
    },
    {
      "type": "quantity_selector",
      "name": "Quantity selector",
      "limit": 1
    },
    {
      "type": "buy_buttons",
      "name": "Buy buttons",
      "limit": 1,
      "settings": [
        {
          "type": "checkbox",
          "id": "show_dynamic_checkout",
          "default": true,
          "label": "Show dynamic checkout"
        },
        {
          "type": "checkbox",
          "id": "show_gift_card_recipient",
          "default": true,
          "label": "Show gift card recipient"
        }
      ]
    },
    {
      "type": "description",
      "name": "Description",
      "limit": 1
    },
    {
      "type": "variant_picker",
      "name": "t:sections.main-product.blocks.variant_picker.name",
      "limit": 1
    },
    {
      "type": "collapsible_tab",
      "name": "Collapsible tab",
      "settings": [
        {
          "type": "text",
          "id": "heading",
          "label": "Heading"
        },
        {
          "type": "select",
          "id": "icon",
          "options": [
            {
              "value": "none",
              "label": "None"
            }
          ],
          "default": "none",
          "label": "Icon"
        },
        {
          "type": "richtext",
          "id": "content",
          "label": "Content"
        },
        {
          "type": "page",
          "id": "page",
          "label": "Page"
        }
      ]
    },
    {
      "type": "popup",
      "name": "Popup",
      "settings": [
        {
          "type": "text",
          "id": "text",
          "label": "Link label"
        },
        {
          "type": "page",
          "id": "page",
          "label": "Page"
        }
      ]
    }
  ]
}
{% endschema %}

<script>
  document.addEventListener('DOMContentLoaded', function () {
    // Get product variants data from our stored object
    document.querySelectorAll('.label-unavailable').forEach((label) => {
      label.classList.add('hidden');
      // Add inline style to ensure it's hidden
      label.style.display = 'none';
    });

    // Add proper URLs to variant options
    const productURL = window.location.pathname;
    document.querySelectorAll('input[type="radio"][name^="Frame Type"]').forEach((radio) => {
      if (radio.dataset.optionValueId) {
        radio.dataset.productUrl = productURL + '?variant=' + radio.dataset.optionValueId;
      }
    });

    // Force the 'available' state for the add to cart button
    const addToCartButton = document.getElementById('add_to_cart');
    if (addToCartButton) {
      addToCartButton.removeAttribute('disabled');
      
      // Also update the button text if it shows "sold out"
      const buttonText = addToCartButton.querySelector('span');
      if (buttonText && buttonText.textContent.toLowerCase().includes('sold out')) {
        buttonText.textContent = 'Add to cart';
      }
    }

    window.variants = {
      original: { id: null, price: null },
      black: { id: null, price: null },
      maple: { id: null, price: null },
      white: { id: null, price: null },
      // natural: {id: null, price: null},
      // wallnut: {id: null, price: null}
    };

    // Add data-variant-id to the radio buttons to make lookup easier
    {% for variant in product.variants %}
    {% if variant.option1 == 'original' or variant.option1 contains 'no frame' %}
    document.querySelector('input[type="radio"][name^="Frame Type"][value="original"]')?.setAttribute('data-variant-id', '{{ variant.id }}');
    {% elsif variant.option1 == 'black' or variant.option1 contains 'black' %}
    document.querySelector('input[type="radio"][name^="Frame Type"][value="black"]')?.setAttribute('data-variant-id', '{{ variant.id }}');
    {% elsif variant.option1 == 'maple' or variant.option1 contains 'maple' %}
    document.querySelector('input[type="radio"][name^="Frame Type"][value="maple"]')?.setAttribute('data-variant-id', '{{ variant.id }}');
    {% elsif variant.option1 == 'white' or variant.option1 contains 'white' %}
    document.querySelector('input[type="radio"][name^="Frame Type"][value="white"]')?.setAttribute('data-variant-id', '{{ variant.id }}');
    {% elsif variant.option1 == 'natural' or variant.option1 contains 'natural' %}
    document.querySelector('input[type="radio"][name^="Frame Type"][value="natural"]')?.setAttribute('data-variant-id', '{{ variant.id }}');
    {% elsif variant.option1 == 'wallnut' or variant.option1 contains 'wallnut' %}
    document.querySelector('input[type="radio"][name^="Frame Type"][value="wallnut"]')?.setAttribute('data-variant-id', '{{ variant.id }}');
    {% endif %}
    {% endfor %}

    // Map option names to variant IDs and prices
    // document.querySelectorAll('input[type="radio"][name^="Frame Type"]').forEach(radio => {
    //   if (radio.value) {
    //     const variantName = radio.value;
    //     const variantId = radio.getAttribute('data-variant-id') ||
    //                      (radio.dataset.productUrl ? radio.dataset.productUrl.split('variant=')[1] : null);

    //     if (variantId && window.productVariants[variantId]) {
    //       window.variants[variantName] = {
    //         id: variantId,
    //         price: window.productVariants[variantId].price,
    //         image: window.productVariants[variantId].featured_image
    //       };
    //     }
    //   }
    // });

    const tabContainer = document.querySelector('.tab');
    // FAQ accordion functionality
    function initFAQ() {
      const faqQuestions = document.querySelectorAll('.faq-question');

      faqQuestions.forEach((question) => {
        question.addEventListener('click', function () {
          const answer = this.nextElementSibling;
          const isExpanded = answer.style.display === 'block';

          // Toggle current question
          if (isExpanded) {
            // Close current question
            this.classList.remove('active');
            answer.style.display = 'none';
          } else {
            // Close all other questions
            faqQuestions.forEach((q) => {
              q.classList.remove('active');
              q.nextElementSibling.style.display = 'none';
            });

            // Open current question
            this.classList.add('active');
            answer.style.display = 'block';
          }
        });
      });
    }

    // Initialize FAQ when the FAQ tab is clicked
    const faqTab = document.querySelector('[data-tab="FAQ"]');
    if (faqTab) {
      faqTab.addEventListener('click', function () {
        setTimeout(initFAQ, 100);
      });
    }

    // Initialize FAQ on page load
    initFAQ();

    // Set first tab as active by default if no tab is active
    const activeTab = document.querySelector('.tablinks.active');
    if (!activeTab) {
      const firstTab = document.querySelector('.tablinks');
      const firstTabContent = document.querySelector('.tabcontent');
      if (firstTab && firstTabContent) {
        firstTab.classList.add('active');
        firstTabContent.classList.add('active');
      }
    }


    // Track drag state
    let isDragging = false;
    let dragStartX = 0;
    let dragStartY = 0;
    let currentTranslateX = 0;
    let currentTranslateY = 0;
    let dragDistance = 0; // Track how far the mouse has moved during drag
    let isZoomed = false; // Track zoom state separately

    // Handle clicks for zooming
    document.addEventListener('mousedown', function (event) {
      if (event.target.classList.contains('modal-image')) {
        // Start position for potential drag or click
        dragStartX = event.clientX;
        dragStartY = event.clientY;
        dragDistance = 0;

        if (isZoomed) {
          // If already zoomed, prepare for dragging
          isDragging = true;
          event.target.style.cursor = 'grabbing';
          event.preventDefault();
        }
      }
    });

    // Mouse move - either drag if zoomed, or track distance for click detection
    document.addEventListener('mousemove', function (event) {
      const image = document.querySelector('.modal-image');
      if (!image) return;

      // Track movement distance to distinguish clicks from drags
      if (dragStartX !== 0 || dragStartY !== 0) {
        const dx = event.clientX - dragStartX;
        const dy = event.clientY - dragStartY;
        dragDistance = Math.sqrt(dx * dx + dy * dy);
      }

      // Handle dragging when zoomed
      if (isDragging && isZoomed) {
        // Calculate how much the mouse has moved
        const deltaX = event.clientX - dragStartX;
        const deltaY = event.clientY - dragStartY;

        // Update the current position
        const newTranslateX = currentTranslateX + deltaX;
        const newTranslateY = currentTranslateY + deltaY;

        // Apply the transform - both scale and translation
        image.style.transform = `scale(1.5) translate(${newTranslateX / 1.5}px, ${newTranslateY / 1.5}px)`;

        // Update the start position for the next mousemove
        dragStartX = event.clientX;
        dragStartY = event.clientY;

        // Update the current position
        currentTranslateX = newTranslateX;
        currentTranslateY = newTranslateY;
      }
    });

    // Mouse up - either toggle zoom or stop dragging
    document.addEventListener('mouseup', function (event) {
      const image = document.querySelector('.modal-image');
      if (!image) return;

      // If moved less than threshold, consider it a click (not a drag)
      if (dragDistance < 5) {
        // Toggle zoom state
        isZoomed = !isZoomed;

        if (isZoomed) {
          // Zoom in
          image.classList.add('zoomed');
          image.style.transform = 'scale(1.5)';
          image.style.cursor = 'move';
        } else {
          // Zoom out
          image.classList.remove('zoomed');
          image.style.transform = 'scale(1)';
          image.style.cursor = 'zoom-in';
          // Reset position
          currentTranslateX = 0;
          currentTranslateY = 0;
        }
      }

      // Reset drag state
      isDragging = false;
      dragStartX = 0;
      dragStartY = 0;
      dragDistance = 0;

      // Update cursor
      if (isZoomed) {
        image.style.cursor = 'move';
      }
    });

    // Mouse leave - stop dragging but keep zoom state
    document.addEventListener('mouseleave', function () {
      isDragging = false;
      dragStartX = 0;
      dragStartY = 0;

      const image = document.querySelector('.modal-image');
      if (image && isZoomed) {
        image.style.cursor = 'move';
      }
    });

    // Allow zooming with mouse wheel
    document.addEventListener(
      'wheel',
      function (event) {
        const modalImage = document.querySelector('.modal-image');
        if (modalImage && event.target.closest('.modal-content')) {
          event.preventDefault();

          if (event.deltaY < 0 && !isZoomed) {
            // Zoom in
            isZoomed = true;
            modalImage.classList.add('zoomed');
            modalImage.style.transform = 'scale(1.5)';
            modalImage.style.cursor = 'move';
          } else if (event.deltaY > 0 && isZoomed) {
            // Zoom out
            isZoomed = false;
            modalImage.classList.remove('zoomed');
            modalImage.style.transform = 'scale(1)';
            modalImage.style.cursor = 'zoom-in';
            // Reset position
            currentTranslateX = 0;
            currentTranslateY = 0;
          }
        }
      },
      { passive: false }
    );

    // When modal is closed, reset all states
    function closeModal() {
      const modal = document.getElementById('imagePreviewModal');
      if (modal) {
        modal.style.display = 'none';
        document.body.style.overflow = '';

        // Reset all zoom and drag states
        isZoomed = false;
        isDragging = false;
        currentTranslateX = 0;
        currentTranslateY = 0;
        dragStartX = 0;
        dragStartY = 0;
        dragDistance = 0;

        // Remove keyboard event listener
        document.removeEventListener('keydown', handleKeyDown);
      }
    }

    
    // Debug: Check form setup
    const form = document.getElementById('product-form');
    const button = document.getElementById('add_to_cart');
    const variantSelect = document.getElementById('product-select');
    const variantInput = document.getElementById('variant-id');
  });
</script>

<script>
  function openModal() {
    const productImage = document.querySelector('.product__image') || document.getElementById('product-main-image');
    const modal = document.getElementById('imagePreviewModal');

    if (productImage && modal) {
      // Get the original image URL
      const imgUrl = productImage.src;

      // Simple approach - just use a regular image with a fullscreen modal
      // Clear and set the modal content
      const modalContent = modal.querySelector('.modal-content');
      modalContent.innerHTML = `
        <span class="close-modal" onclick="closeModal()">&times;</span>
        <img src="${imgUrl}" alt="${
        productImage.alt || 'Product image'
      }" class="modal-image" loading="lazy" decoding="async"/>
      `;

      // Display the modal
      modal.style.display = 'flex';
      document.body.style.overflow = 'hidden';

      // Add keyboard event listener
      document.addEventListener('keydown', handleKeyDown);
    }
  }

  function closeModal() {
    const modal = document.getElementById('imagePreviewModal');
    if (modal) {
      modal.style.display = 'none';
      document.body.style.overflow = '';

      // Remove keyboard event listener
      document.removeEventListener('keydown', handleKeyDown);
    }
  }

  function handleKeyDown(event) {
    if (event.key === 'Escape') {
      closeModal();
    }
  }

  // Debounce function implementation
  function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
      const later = () => {
        clearTimeout(timeout);
        func(...args);
      };
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
    };
  }

  function openCity(evt, cityName) {
    var i, tabcontent, tablinks;

    // Hide all tab content
    tabcontent = document.getElementsByClassName('tabcontent');
    for (i = 0; i < tabcontent.length; i++) {
      tabcontent[i].style.display = 'none';
    }

    // Remove active class from all tabs
    tablinks = document.getElementsByClassName('tablinks');
    for (i = 0; i < tablinks.length; i++) {
      tablinks[i].className = tablinks[i].className.replace(' active', '');
    }

    // Show selected tab content and add active class to selected tab
    document.getElementById(cityName).style.display = 'flex';
    evt.currentTarget.className += ' active';
  }

  // Set default tab as active when page loads
  const defaultTab = document.querySelector('.tablinks');
  if (defaultTab) {
    defaultTab.click();
  }

  // Make openCity function available globally
  window.openCity = openCity;

  // Capture framed image on Add to Cart - CONSOLIDATED EVENT HANDLER
  const addToCartButton = document.getElementById('add_to_cart');
  const originalButtonText = addToCartButton.innerHTML;
  if (addToCartButton) {
    addToCartButton.addEventListener('click', async function (event) {
      event.preventDefault();

      const form = addToCartButton.closest('form');
      if (!form) {
        console.error('Product form not found');
        return;
      }

      // Show loading state immediately
      addToCartButton.innerHTML = '<span style="display: inline-block; width: 20px; height: 20px; border: 2px solid #f3f3f3; border-top: 2px solid #333; border-radius: 50%; animation: spin 1s linear infinite;"></span> Adding...';
      addToCartButton.disabled = true;

      // Remove any existing property inputs to avoid duplicates
      const existingProperties = form.querySelectorAll('input[name^="properties["]');
      existingProperties.forEach(input => input.remove());

      // Get the active frame option
      const activeFrameOption = document.querySelector('#group-2 .option.active');
      const frameType = activeFrameOption ? activeFrameOption.querySelector('.component_title').textContent.trim() : 'No Frame';

      // Get the active dimension option
      const activeDimensionOption = document.querySelector('#group-0 .option.active');
      const dimensionWidth = activeDimensionOption ? activeDimensionOption.getAttribute('data-width') : '';
      const dimensionHeight = activeDimensionOption ? activeDimensionOption.getAttribute('data-height') : '';
      const dimensionText = dimensionWidth && dimensionHeight ? `${dimensionWidth}" x ${dimensionHeight}"` : '';

      // Get the active border option
      const activeBorderOption = document.querySelector('#group-1 .option.active');
      const borderType = activeBorderOption
        ? activeBorderOption.querySelector('.component_title').textContent.trim()
        : 'No Border';

      // Update the variant ID based on frame selection BEFORE adding properties
      console.log(`Updating variant selection for frame type: ${frameType}`);
      updateVariantSelection(frameType);

      // Wait a moment to ensure variant selection is processed
      await new Promise(resolve => setTimeout(resolve, 50));

      // Verify the variant ID was updated
      const variantIdInput = document.getElementById('variant-id');
      const finalVariantId = variantIdInput ? variantIdInput.value : 'Not found';
      console.log(`Final variant ID being submitted: ${finalVariantId}`);

      // Create hidden inputs for properties
      if (frameType) {
        const frameTypeInput = document.createElement('input');
        frameTypeInput.type = 'hidden';
        frameTypeInput.name = 'properties[Frame Type]';
        frameTypeInput.value = frameType;
        form.appendChild(frameTypeInput);
      }

      if (dimensionText) {
        const dimensionsInput = document.createElement('input');
        dimensionsInput.type = 'hidden';
        dimensionsInput.name = 'properties[Dimensions]';
        dimensionsInput.value = dimensionText;
        form.appendChild(dimensionsInput);
      }

      if (borderType) {
        const borderInput = document.createElement('input');
        borderInput.type = 'hidden';
        borderInput.name = 'properties[Border]';
        borderInput.value = borderType;
        form.appendChild(borderInput);
      }

      // Add the current framed image
      const productImage = document.getElementById('product-main-image');
      if (productImage && productImage.src) {
        const variantImageInput = document.createElement('input');
        variantImageInput.type = 'hidden';
        variantImageInput.name = 'properties[_variant_image]';
        variantImageInput.value = productImage.src;
        form.appendChild(variantImageInput);
      }

      // Debug: Log form data before submission
      const formData = new FormData(form);
      console.log("=== FORM SUBMISSION DEBUG ===");
      console.log("Form data before submission:");
      for (let [key, value] of formData.entries()) {
        console.log(`${key}: ${value}`);
      }
      
      // Double check the variant ID one more time
      const finalCheck = document.getElementById('variant-id');
      console.log(`Final variant check - Element value: ${finalCheck ? finalCheck.value : 'Not found'}`);
      
      // Check which variant this corresponds to in our debug data
      if (window.debugProductVariants && finalCheck) {
        const selectedVariant = window.debugProductVariants.find(v => v.id.toString() === finalCheck.value);
        if (selectedVariant) {
          console.log('Selected variant details:', selectedVariant);
          console.log(`Price that should be applied: $${(selectedVariant.price / 100).toFixed(2)}`);
        } else {
          console.warn('Could not find variant details for ID:', finalCheck.value);
        }
      }
      console.log("=== END FORM SUBMISSION DEBUG ===");

      // Submit the form
      try {
        form.submit();
        console.log("Form submitted successfully");
      } catch (error) {
        console.error('Error submitting form:', error);
        // Reset button on error
        addToCartButton.innerHTML = originalButtonText;
        addToCartButton.disabled = false;
      }
    });

    setTimeout(() => {
      addToCartButton.innerHTML = originalButtonText;
      addToCartButton.disabled = false;
    }, 1000);
  }

  // Function to update variant selection based on frame type
  window.updateVariantSelection = function(frameType) {
    console.log(`updateVariantSelection called with frameType: ${frameType}`);
    
    const variantSelect = document.getElementById('product-select');
    const variantIdInput = document.getElementById('variant-id');
    console.log("variantSelect ============ ", variantSelect);
    console.log("variantIdInput ============ ", variantIdInput);
    if (!variantSelect || !variantIdInput) {
      console.warn('Variant select or input not found', { variantSelect: !!variantSelect, variantIdInput: !!variantIdInput });
      return false;
    }

    console.log(`Current variant ID before update: ${variantIdInput.value}`);
    
    // Find the matching variant option - try multiple strategies
    const options = variantSelect.querySelectorAll('option');
    console.log(`Found ${options.length} variant options`);
    
    let found = false;
    
    // Strategy 1: Exact match with frame type
    for (let option of options) {
      const optionVariantName = option.getAttribute('data-variant-name');
      console.log(`Checking option: ${option.value} with variant name: ${optionVariantName}`);
      
      if (optionVariantName === frameType) {
        const oldVariantId = variantIdInput.value;
        
        // Update both select and hidden input
        variantSelect.value = option.value;
        variantIdInput.value = option.value;
        found = true;
        console.log(`✓ Exact match found: Updated variant ID from ${oldVariantId} to ${option.value}`);
        break;
      }
    }
    
    // Strategy 2: Pattern-based matching if exact match fails
    if (!found) {
      console.log('Exact match failed, trying pattern matching...');
      
      // Get current configuration to build variant pattern
      const activeDimensionOption = document.querySelector('#group-0 .option.active');
      const activeBorderOption = document.querySelector('#group-1 .option.active');
      
      const scale = activeDimensionOption ? activeDimensionOption.getAttribute('data-scale') : 'medium';
      const borderValue = activeBorderOption ? activeBorderOption.getAttribute('data-value') : '0';
      
      // Map frame types to expected variant name patterns
      const frameToPattern = {
        'No Frame': ['original', 'noframe', 'no frame'],
        'Black Mat': ['black'],
        'Maple Natural': ['maple'],
        'White': ['white']
      };
      
      const patterns = frameToPattern[frameType] || ['original'];
      const expectedPattern = `${scale}-${patterns[0]}-${borderValue}`;
      
      console.log(`Looking for pattern: ${expectedPattern}`);
      
      for (let option of options) {
        const optionVariantName = option.getAttribute('data-variant-name');
        
        // Check if variant name contains the expected pattern
        for (let pattern of patterns) {
          if (optionVariantName && optionVariantName.toLowerCase() == expectedPattern.toLowerCase()) {
            const oldVariantId = variantIdInput.value;
            
            // Update both select and hidden input
            variantSelect.value = option.value;
            variantIdInput.value = option.value;
            
            console.log(`✓ Pattern match found: Updated variant ID from ${oldVariantId} to ${option.value}`);
            
            // Update the displayed price
            updateDisplayedPrice(option.getAttribute('data-price'));
            
            // Trigger change event to update price display
            variantSelect.dispatchEvent(new Event('change', { bubbles: true }));
            variantIdInput.dispatchEvent(new Event('change', { bubbles: true }));
            
            found = true;
            console.log(`✓ Successfully updated variant to: ${option.value} (${frameType}) - Price: ${option.getAttribute('data-price')}`);
            break;
          }
        }
        
        if (found) break;
      }
    }
    
    if (!found) {
      console.warn(`❌ No variant found for frame type: ${frameType}`);
      console.log('Available variants:', Array.from(options).map(opt => ({
        id: opt.value,
        name: opt.getAttribute('data-variant-name'),
        title: opt.textContent
      })));
    }
    
    return found;
  }

  // Function to update the displayed price
  function updateDisplayedPrice(priceInCents) {
    if (!priceInCents) return;
    
    const price = parseInt(priceInCents);
    const formattedPrice = new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD'
    }).format(price / 100);

    // Update the price display
    const priceElements = document.querySelectorAll('.price .price-item--regular, .price .price-item--sale');
    priceElements.forEach(element => {
      element.textContent = formattedPrice;
    });

    // Also update any other price displays
    const productSubTitles = document.querySelectorAll('.product_sub_title');
    productSubTitles.forEach(element => {
      element.textContent = formattedPrice;
    });
    
    console.log(`Updated displayed price to: ${formattedPrice}`);
  }

  // Debug function to check variant options
  function debugVariantOptions() {
    console.log('=== VARIANT OPTIONS DEBUG ===');
    const variantSelect = document.getElementById('product-select');
    if (variantSelect) {
      const options = variantSelect.querySelectorAll('option');
      console.log(`Found ${options.length} options in select:`);
      options.forEach((option, index) => {
        console.log(`Option ${index}:`, {
          value: option.value,
          'data-variant-name': option.getAttribute('data-variant-name'),
          'data-price': option.getAttribute('data-price'),
          text: option.textContent.trim(),
          selected: option.selected
        });
      });
    } else {
      console.error('Variant select element not found!');
    }
    console.log('=== END VARIANT OPTIONS DEBUG ===');
  }

  // Set default frame (Black Mat) as active on page load
  document.addEventListener('DOMContentLoaded', function () {
    // Run debug function first
    debugVariantOptions();
    
    const defaultFrame = document.querySelector('#group-2 .option_2-1');
    if (defaultFrame) {
      defaultFrame.click();
    } else {
      // Ensure variant is properly set even if default frame doesn't exist
      if (typeof updateVariantSelection === 'function') {
        updateVariantSelection('medium-black-0');
      }
      changeFrameImageConfig("medium", 40, 60, 0, 1);
    }
  });
</script>