{{ 'section-multicolumn.css' | asset_url | stylesheet_tag }}
{{ 'component-slider.css' | asset_url | stylesheet_tag }}

{%- style -%}
  .section-{{ section.id }}-padding {
    padding-top: {{ section.settings.padding_top | times: 0.75 | round: 0 }}px;
    padding-bottom: {{ section.settings.padding_bottom | times: 0.75 | round: 0 }}px;
  }

  /* Desktop Styles */
  @media screen and (min-width: 750px) {
    .section-{{ section.id }}-padding {
      padding-top: {{ section.settings.padding_top }}px;
      padding-bottom: {{ section.settings.padding_bottom }}px;
    }

    .multicolumn-list {
      gap: 2rem;
      margin: 0;
      padding: 0;
    }

    .multicolumn-list__item {
      padding: 0;
      margin: 0;
    }

    .multicolumn-card {
      display: flex;
      flex-direction: column;
      height: 100%;
      position: relative;
    }

    .multicolumn-card__image-wrapper {
      margin: 0;
      position: relative;
      width: 100%;
      height: 400px;
      overflow: hidden;
    }

    .multicolumn-card__image-wrapper img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      transition: transform 0.3s ease;
    }

    .multicolumn-card img {
      height: 280px;
      object-fit: cover;
    }

    .multicolumn-card__info {
      padding: 2rem 0;
      text-align: left;
    }

    .multicolumn-card__info h3 {
      margin: 0 0 1rem;
      font-size: 1.8rem;
      font-weight: 600;
    }

    .multicolumn-card__info .rte {
      margin-bottom: 1.5rem;
      font-size: 1rem;
      line-height: 1.5;
    }
  }

  /* Mobile Styles */
  @media screen and (max-width: 749px) {
    .multicolumn-list {
      display: flex;
      gap: 0;
      margin: 0;
      padding: 0;
      scroll-snap-type: x mandatory;
      overflow-x: auto;
      -webkit-overflow-scrolling: touch;
      scroll-behavior: smooth;
      width: 100%;
      flex-wrap: nowrap;
      scroll-padding: 0;
      -ms-scroll-snap-points-x: snapInterval(0%, 100%);
      scroll-snap-points-x: repeat(100%);
    }

    .multicolumn-list__item {
      flex: 0 0 100%;
      min-width: 100%;
      padding: 0;
      margin: 0;
      scroll-snap-align: center;
      scroll-snap-stop: always;
      width: 100%;
    }

    .slider-mobile-gutter {
      position: relative;
      width: 100%;
      overflow: hidden;
      margin: 0;
      padding: 0;
    }

    .multicolumn-card {
      display: flex;
      flex-direction: column;
      height: 100%;
      width: 100%;
      margin: 0;
    }

    .multicolumn-card__image-wrapper {
      margin: 0;
      position: relative;
      width: 100%;
      height: 300px;
      overflow: hidden;
    }

    .multicolumn-card__image-wrapper img {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }

    .multicolumn-card__info {
      padding: 1.5rem;
    }

    .multicolumn-card__info h3 {
      margin: 0 0 0.75rem;
      font-size: 1.5rem;
      font-weight: 600;
    }

    .multicolumn-card__info .rte {
      margin-bottom: 1rem;
      font-size: 0.9rem;
      line-height: 1.4;
    }

    .multicolumn-card__info .link {
      font-size: 0.9rem;
      text-decoration: none;
      display: inline-flex;
      align-items: center;
      gap: 0.5rem;
    }

    /* Mobile slider navigation */
    .slider-buttons {
      display: flex;
      justify-content: center;
      align-items: center;
      gap: 1rem;
      margin-top: 1.5rem;
    }

    .slider-button {
      background: transparent;
      border: none;
      padding: 0.5rem;
      cursor: pointer;
    }

    .slider-counter {
      font-size: 0.9rem;
    }

    .multicolumn-card img{
      height: 200px;
      object-fit: cover;
    }
  }

  /* Common styles for both desktop and mobile */
  .multicolumn-card__info .link:hover {
    text-decoration: underline;
  }

  .svg-wrapper {
    display: inline-flex;
    align-items: center;
  }

  .animate--slide-in {
    opacity: 0;
    transform: translateY(20px);
    transition: opacity 0.5s ease, transform 0.5s ease;
  }

  .animate--slide-in.scroll-trigger--animate {
    opacity: 1;
    transform: translateY(0);
  }
{%- endstyle -%}

{%- liquid
  assign columns_mobile_int = section.settings.columns_mobile | plus: 0
  assign show_mobile_slider = false
  if section.settings.swipe_on_mobile and section.blocks.size > columns_mobile_int
    assign show_mobile_slider = true
  endif
-%}

<div class="multicolumn page-width mt-40 mb-40">
  <div
    class="isolate{% if settings.animations_reveal_on_scroll %} scroll-trigger animate--slide-in{% endif %}"
    {% if settings.animations_reveal_on_scroll %}
    data-cascade
    {% endif %}>
    {%- unless section.settings.title == blank -%}
      <div class="title-wrapper-with-link title-wrapper--self-padded-mobile title-wrapper--no-top-margin multicolumn__title">
        <span class="main-collection-slide-title">
          {{ section.settings.title }}
        </span>
      </div>
    {%- endunless -%}
    <slider-component class="slider-mobile-gutter">
      <ul
        class="multicolumn-list contains-content-container  main-container grid grid--{{ section.settings.columns_mobile }}-col-tablet-down grid--{{ section.settings.columns_desktop }}-col-desktop{% if show_mobile_slider %} slider slider--tablet grid--peek{% endif %}"
        id="Slider-{{ section.id }}"
        role="list">
        {%- liquid
          assign highest_ratio = 0
          for block in section.blocks
            if block.settings.image.aspect_ratio > highest_ratio
              assign highest_ratio = block.settings.image.aspect_ratio
            endif
          endfor
        -%}
        {%- for block in section.blocks -%}
          {%- assign empty_column = '' -%}
          {%- if block.settings.image == blank and block.settings.title == blank and block.settings.text == blank and block.settings.link_label == blank
          -%}
            {%- assign empty_column = ' multicolumn-list__item--empty' -%}
          {%- endif -%}

          <li
            id="Slide-{{ section.id }}-{{ forloop.index }}"
            class="multicolumn-list__item grid__item{% if section.settings.swipe_on_mobile %} slider__slide{% endif %}{% if section.settings.column_alignment == 'center' %} center{% endif %}{{ empty_column }}{% if settings.animations_reveal_on_scroll %} scroll-trigger animate--slide-in{% endif %}"
            {{ block.shopify_attributes }}
            {% if settings.animations_reveal_on_scroll %}
            data-cascade
            style="--animation-order: {{ forloop.index }};"
            {% endif %}>
            <div class="multicolumn-card content-container">
              {%- if block.settings.image != blank -%}
                {% if section.settings.image_ratio == 'adapt' or section.settings.image_ratio == 'circle' %}
                  {% assign spaced_image = true %}
                {% endif %}
                <div class="multicolumn-card__image-wrapper multicolumn-card__image-wrapper--{{ section.settings.image_width }}-width{% if section.settings.image_width != 'full' or spaced_image %} multicolumn-card-spacing{% endif %}">
                  <div
                    class="media media--transparent media--{{ section.settings.image_ratio }}"
                    {% if section.settings.image_ratio == 'adapt' %}
                    style="padding-bottom: {{ 1 | divided_by: highest_ratio | times: 100 }}%;"
                    {% endif %}>
                    {%- liquid
                      assign number_of_columns = section.settings.columns_desktop
                      assign number_of_columns_mobile = section.settings.columns_mobile
                      assign grid_space_desktop = number_of_columns | minus: 1 | times: settings.spacing_grid_horizontal | plus: 100 | append: 'px'
                      assign grid_space_tablet = number_of_columns_mobile | minus: 1 | times: settings.spacing_grid_horizontal | plus: 100 | append: 'px'
                      assign grid_space_mobile = number_of_columns_mobile | minus: 1 | times: settings.spacing_grid_horizontal | divided_by: 2 | plus: 30 | append: 'px'
                      if section.settings.image_width == 'half'
                        assign image_width = 0.5
                      elsif section.settings.image_width == 'third'
                        assign image_width = 0.33
                      else
                        assign image_width = 1
                      endif
                    -%}
                    {% capture sizes %}
                      (min-width: {{ settings.page_width }}px) calc(({{ settings.page_width }}px - {{ grid_space_desktop }}) * {{ image_width }} /  {{ number_of_columns }}),
                      (min-width: 990px) calc((100vw - {{ grid_space_desktop }}) * {{ image_width }} / {{ number_of_columns }}),
                      (min-width: 750px) calc((100vw - {{ grid_space_tablet }}) * {{ image_width }} / {{ number_of_columns_mobile }}),
                      calc((100vw - {{ grid_space_mobile }}) * {{ image_width }} / {{ number_of_columns_mobile }})
                    {% endcapture %}
                    {{
                      block.settings.image | image_url: width: 3200 | image_tag: widths: '50, 75, 100, 150, 200, 300, 400, 500, 750, 1000, 1250, 1500, 1750, 2000, 2250, 2500, 2750, 3000, 3200', sizes: sizes, class: 'multicolumn-card__image'
                    }}
                  </div>
                </div>
              {%- endif -%}
              <img
                alt="Custom Image {{ forloop.index }}"
                src="{{ 'collection-' | append: forloop.index | append: '.png' | asset_url }}"
                decoding="async"
                loading="eager"
                fetchpriority="auto"
                class="instant-image instant-image__main">
              <div class="multicolumn-card__info">
                {%- if block.settings.title != blank -%}
                  <h3 class="product_title">{{ block.settings.title }}</h3>
                {%- endif -%}
                {%- if block.settings.text != blank -%}
                  <div class="sm_text">{{ block.settings.text }}</div>
                {%- endif -%}
                {%- if block.settings.link_label != blank -%}
                  <a
                    class="link animate-arrow sm_bold_text"
                    {% if block.settings.link == blank %}
                    role="link"
                    aria-disabled="true"
                    {% else %}
                    href="{{ block.settings.link }}"
                    {% endif %}>
                    {{- block.settings.link_label | escape -}}
                  </a>
                {%- endif -%}
              </div>
            </div>
          </li>
        {%- endfor -%}
      </ul>

      {%- if show_mobile_slider -%}
        <div class="slider-buttons large-up-hide">
          <button
            type="button"
            class="slider-button slider-button--prev"
            name="previous"
            aria-label="{{ 'general.slider.previous_slide' | t }}">
            <span class="svg-wrapper">{{ 'icon-caret.svg' | inline_asset_content }}</span>
          </button>
          <div class="slider-counter caption">
            <span class="slider-counter--current">1</span>
            <span aria-hidden="true">
              /
            </span>
            <span class="visually-hidden">{{ 'general.slider.of' | t }}</span>
            <span class="slider-counter--total">{{ section.blocks.size }}</span>
          </div>
          <button
            type="button"
            class="slider-button slider-button--next"
            name="next"
            aria-label="{{ 'general.slider.next_slide' | t }}">
            <span class="svg-wrapper">{{ 'icon-caret.svg' | inline_asset_content }}</span>
          </button>
        </div>
      {%- endif -%}
    </slider-component>
  </div>
</div>

{% schema %}
  {
    "name": "t:sections.multicolumn.name",
    "class": "section",
    "tag": "section",
    "disabled_on": {
      "groups": ["header", "footer"]
    },
    "settings": [
      {
        "type": "inline_richtext",
        "id": "title",
        "default": "t:sections.multicolumn.settings.title.default",
        "label": "t:sections.multicolumn.settings.title.label"
      },
      {
        "type": "select",
        "id": "heading_size",
        "options": [
          {
            "value": "h2",
            "label": "t:sections.all.heading_size.options__1.label"
          },
          {
            "value": "h1",
            "label": "t:sections.all.heading_size.options__2.label"
          },
          {
            "value": "h0",
            "label": "t:sections.all.heading_size.options__3.label"
          },
          {
            "value": "hxl",
            "label": "t:sections.all.heading_size.options__4.label"
          }, {
            "value": "hxxl",
            "label": "t:sections.all.heading_size.options__5.label"
          }
        ],
        "default": "h1",
        "label": "t:sections.all.heading_size.label"
      },
      {
        "type": "header",
        "content": "t:sections.multicolumn.settings.header_image.content"
      },
      {
        "type": "select",
        "id": "image_width",
        "options": [
          {
            "value": "third",
            "label": "t:sections.multicolumn.settings.image_width.options__1.label"
          }, {
            "value": "half",
            "label": "t:sections.multicolumn.settings.image_width.options__2.label"
          }, {
            "value": "full",
            "label": "t:sections.multicolumn.settings.image_width.options__3.label"
          }
        ],
        "default": "full",
        "label": "t:sections.multicolumn.settings.image_width.label"
      }, {
        "type": "select",
        "id": "image_ratio",
        "options": [
          {
            "value": "adapt",
            "label": "t:sections.multicolumn.settings.image_ratio.options__1.label"
          }, {
            "value": "portrait",
            "label": "t:sections.multicolumn.settings.image_ratio.options__2.label"
          }, {
            "value": "square",
            "label": "t:sections.multicolumn.settings.image_ratio.options__3.label"
          }, {
            "value": "circle",
            "label": "t:sections.multicolumn.settings.image_ratio.options__4.label"
          }
        ],
        "default": "adapt",
        "label": "t:sections.multicolumn.settings.image_ratio.label"
      }, {
        "type": "header",
        "content": "t:sections.multicolumn.settings.header_button.content"
      }, {
        "type": "text",
        "id": "button_label",
        "default": "t:sections.multicolumn.settings.button_label.default",
        "label": "t:sections.multicolumn.settings.button_label.label",
        "info": "t:sections.multicolumn.settings.button_label.info"
      }, {
        "type": "url",
        "id": "button_link",
        "label": "t:sections.multicolumn.settings.button_link.label"
      }, {
        "type": "header",
        "content": "t:sections.multicolumn.settings.header_layout.content"
      }, {
        "type": "range",
        "id": "columns_desktop",
        "min": 1,
        "max": 6,
        "step": 1,
        "default": 3,
        "label": "t:sections.multicolumn.settings.columns_desktop.label"
      }, {
        "type": "select",
        "id": "column_alignment",
        "options": [
          {
            "value": "left",
            "label": "t:sections.multicolumn.settings.column_alignment.options__1.label"
          }, {
            "value": "center",
            "label": "t:sections.multicolumn.settings.column_alignment.options__2.label"
          }
        ],
        "default": "left",
        "label": "t:sections.multicolumn.settings.column_alignment.label"
      }, {
        "type": "select",
        "id": "background_style",
        "options": [
          {
            "value": "none",
            "label": "t:sections.multicolumn.settings.background_style.options__1.label"
          }, {
            "value": "primary",
            "label": "t:sections.multicolumn.settings.background_style.options__2.label"
          }
        ],
        "default": "primary",
        "label": "t:sections.multicolumn.settings.background_style.label"
      }, {
        "type": "color_scheme",
        "id": "color_scheme",
        "label": "t:sections.all.colors.label",
        "default": "scheme-1"
      }, {
        "type": "header",
        "content": "t:sections.multicolumn.settings.header_mobile.content"
      }, {
        "type": "select",
        "id": "columns_mobile",
        "options": [
          {
            "value": "1",
            "label": "t:sections.multicolumn.settings.columns_mobile.options__1.label"
          }, {
            "value": "2",
            "label": "t:sections.multicolumn.settings.columns_mobile.options__2.label"
          }
        ],
        "default": "1",
        "label": "t:sections.multicolumn.settings.columns_mobile.label"
      }, {
        "type": "checkbox",
        "id": "swipe_on_mobile",
        "default": false,
        "label": "t:sections.multicolumn.settings.swipe_on_mobile.label"
      }, {
        "type": "header",
        "content": "t:sections.all.padding.section_padding_heading"
      }, {
        "type": "range",
        "id": "padding_top",
        "min": 0,
        "max": 100,
        "step": 4,
        "unit": "px",
        "label": "t:sections.all.padding.padding_top",
        "default": 36
      }, {
        "type": "range",
        "id": "padding_bottom",
        "min": 0,
        "max": 100,
        "step": 4,
        "unit": "px",
        "label": "t:sections.all.padding.padding_bottom",
        "default": 36
      }
    ],
    "blocks": [
      {
        "type": "column",
        "name": "t:sections.multicolumn.blocks.column.name",
        "settings": [
          {
            "type": "image_picker",
            "id": "image",
            "label": "t:sections.multicolumn.blocks.column.settings.image.label"
          },
          {
            "type": "inline_richtext",
            "id": "title",
            "default": "t:sections.multicolumn.blocks.column.settings.title.default",
            "label": "t:sections.multicolumn.blocks.column.settings.title.label"
          },
          {
            "type": "richtext",
            "id": "text",
            "default": "t:sections.multicolumn.blocks.column.settings.text.default",
            "label": "t:sections.multicolumn.blocks.column.settings.text.label"
          },
          {
            "type": "text",
            "id": "link_label",
            "label": "t:sections.multicolumn.blocks.column.settings.link_label.label",
            "info": "t:sections.multicolumn.blocks.column.settings.link_label.info"
          }, {
            "type": "url",
            "id": "link",
            "label": "t:sections.multicolumn.blocks.column.settings.link.label"
          }
        ]
      }
    ],
    "presets": [
      {
        "name": "t:sections.multicolumn.presets.name",
        "blocks": [
          {
            "type": "column"
          }, {
            "type": "column"
          }, {
            "type": "column"
          }
        ]
      }
    ]
  }
{% endschema %}

<script>
  class SliderComponent extends HTMLElement {
    constructor() {
      super();
      this.slider = this.querySelector('.multicolumn-list');
      this.sliderItems = this.querySelectorAll('.multicolumn-list__item');
      this.prevButton = this.querySelector('button[name="previous"]');
      this.nextButton = this.querySelector('button[name="next"]');
      this.currentSlide = 1;
      this.sliderCounter = this.querySelector('.slider-counter--current');
      this.sliderCounterTotal = this.querySelector('.slider-counter--total');

      if (!this.slider || !this.sliderItems.length) return;

      this.initializeSlider();
      this.setupEventListeners();
    }

    initializeSlider() {
      if (this.sliderCounterTotal) {
        this.sliderCounterTotal.textContent = this.sliderItems.length;
      }
      this.updateCurrentCounter();
    }

    setupEventListeners() {
      if (this.prevButton) {
        this.prevButton.addEventListener('click', this.onPrevButtonClick.bind(this));
      }

      if (this.nextButton) {
        this.nextButton.addEventListener('click', this.onNextButtonClick.bind(this));
      }

      this.slider.addEventListener('scroll', this.onSliderScroll.bind(this));
    }

    onSliderScroll() {
      clearTimeout(this.scrollTimeout);
      this.scrollTimeout = setTimeout(() => {
        this.updateCurrentCounter();
      }, 100);
    }

    updateCurrentCounter() {
      const slideWidth = this.sliderItems[0].offsetWidth;
      this.currentSlide = Math.round(this.slider.scrollLeft / slideWidth) + 1;
      
      if (this.sliderCounter) {
        this.sliderCounter.textContent = this.currentSlide;
      }

      // Update button states
      if (this.prevButton) {
        this.prevButton.disabled = this.currentSlide === 1;
      }
      if (this.nextButton) {
        this.nextButton.disabled = this.currentSlide === this.sliderItems.length;
      }
    }

    onPrevButtonClick() {
      const slideWidth = this.sliderItems[0].offsetWidth;
      this.slider.scrollTo({
        left: (this.currentSlide - 2) * slideWidth,
        behavior: 'smooth'
      });
    }

    onNextButtonClick() {
      const slideWidth = this.sliderItems[0].offsetWidth;
      this.slider.scrollTo({
        left: this.currentSlide * slideWidth,
        behavior: 'smooth'
      });
    }
  }

  customElements.define('slider-component', SliderComponent);
</script>